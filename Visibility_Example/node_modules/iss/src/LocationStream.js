'use strict';

var stream = require('stream'),
    Readable = stream.Readable,
    https = require('https'),
    merge = require('merge'),
    util = require('util');

// TODO: There is an issue with the ssl certificates. Ignore any errors.
process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';
var URL = 'https://api.wheretheiss.at/v1/satellites/';

/**
 * @param {int} [id] - Satellite identifier
 * @param rate - Max requests per minute. Default 100 per minute.
 * @param {Object} [opts] - Stream options.
 * @constructor
 */
function LocationStream(id, rate, opts) {
    Readable.call(this, opts);
    this.id = id || 25544;
    this.rate = rate || 100;
    /**
     * Timestamp of last request
     * @type {null|int}
     * @private
     */
    this._lastRequestTime = 0;
    /**
     * Whether or not currently waiting for a HTTP request.
     * @type {boolean}
     * @private
     */
    this.finished = false;
}
util.inherits(LocationStream, Readable);

merge(LocationStream.prototype, {
    _getData: function () {
        this._lastRequestTime = Date.now() / 1000;
        https.get(URL + this.id, function (res) {
            var body = '';
            res.setEncoding('utf8');
            res.on('data', function (chunk) {
                body += chunk;
            });
            res.on('end', function () {
                var statusCode = res.statusCode;
                if (statusCode >= 200 && statusCode < 300) {
                    this.push(body);
                }
                else {
                    this.emit('error', new Error('HTTP request failed with status code '
                    + statusCode.toString() + ' and body \'' + body + '\''))
                }
            }.bind(this));
        }.bind(this))
            .on('error', function (e) {
                this.emit('error', e);
            }.bind(this));
    },
    _read: function () {
        if (!this.finished) {
            var lastRequest = this._lastRequestTime,
                delay = 60 / this.rate,
                diff = (Date.now() / 1000) - lastRequest;
            if (diff > delay) {
                this._getData();
            }
            else {
                var next = (delay - diff) * 1000;
                setTimeout(this._getData.bind(this), next);
            }
        }
        else {
            // Push EOF chunk, which will emit 'end' event once nothing left in the buffer.
            this.push();
        }
    },
    end: function () {
        this.finished = true;
    }
});

module.exports = LocationStream;