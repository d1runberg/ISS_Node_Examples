'use strict';

var stream = require('stream'),
    LocationStream = require('./LocationStream'),
    util = require('util'),
    merge = require('merge'),
    Transform = stream.Transform;


function ChangeInLocationTransform(opts) {
    Transform.call(this, opts);
    this._previousData = null;
}
util.inherits(ChangeInLocationTransform, Transform);

merge(ChangeInLocationTransform.prototype, {
    _transform: function (chunk, encoding, callback) {
        var data = JSON.parse(chunk.toString('utf8'));
        var newChunk;
        if (this._previousData) {
            var lat = data.latitude,
                long = data.longitude,
                timestamp = data.timestamp,
                prevLat = this._previousData.latitude,
                prevLong = this._previousData.longitude,
                prevTimestamp = this._previousData.timestamp;
            // Only emit a data point if we have two different data sets.
            if (timestamp != prevTimestamp) {
                var changeInLat = lat - prevLat,
                    changeInLong = long - prevLong,
                    time = timestamp - prevTimestamp;
                newChunk = JSON.stringify({
                    latPerSec: changeInLat / time,
                    longPerSec: changeInLong / time
                });
            }
        }
        this._previousData = data;
        callback(null, newChunk);
    }
});

module.exports = ChangeInLocationTransform;